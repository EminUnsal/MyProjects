apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-service-account
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-okuyucu
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: my-service-account
  apiGroup: ""
roleRef:
  kind: Role 
  name: pod-okuyucu
  apiGroup: rbac.authorization.k8s.io
# ---
# kind: ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: alternative
#   namespace: default
# subjects:
# - kind: ServiceAccount
#   name: my-service-account
#   namespace: default
#   apiGroup: ""
# roleRef:
#   kind: ClusterRole
#   name: view
#   apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: pod-proje
  namespace: default
spec:
  serviceAccountName: my-service-account
  containers:
  - name: projecontainer
    image: nginx
    ports:
    - containerPort: 80




# $ kubectl exec -it pod-proje -- bash

# bash-5.0# CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

# bash-5.0# TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) # jwt.io'a git

# bash-5.0# curl --cacert $CERT https://kubernetes/api/v1/namespaces/default/pods --header "Authorization:Bearer $TOKEN" | jq '.items[].metadata.name'
